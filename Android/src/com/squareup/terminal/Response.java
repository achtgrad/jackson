/*
 * Copyright (C) 2011 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.terminal;

import android.content.Intent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * Immutable response to a payment request from the Square app. Square intentionally elides
 * payment details from Terminal API responses. Instead, applications should use Square's
 * History API to confirm payments and query payment details.
 *
 * @author Bob Lee (bob@squareup.com)
 */
public class Response {

  private static final String PAYMENT_ID = "paymentId";
  private static final String REFERENCE_ID = "referenceId";
  private static final String ERRORS = "errors";

  public static final String PARAM_STATUS = "square_status=";
  public static final String PARAM_REFERENCE_ID = "square_reference_id=";
  public static final String PARAM_ERRORS = "square_errors=";
  public static final String PARAM_PAYMENT_ID = "square_payment_id=";

  public static final String STATUS_ERROR = "error";
  public static final String STATUS_SUCCESSFUL = "successful";
  public static final String STATUS_CANCELLED = "cancelled";

  private final String paymentId;
  private final String referenceId;

  private final List<String> errors;

  private Response(String paymentId, String referenceId, List<String> errors) {
    this.paymentId = paymentId;
    this.referenceId = referenceId;
    this.errors = errors == null ? Collections.<String>emptyList() :
      Collections.unmodifiableList(new ArrayList<String>(errors));
  }

  /**
   * Constructs a successful response.
   *
   * @param paymentId generated by Square
   * @param referenceId passed to {@link Payment#referenceId(String)}
   */
  public Response(String paymentId, String referenceId) {
    this.paymentId = paymentId;
    this.referenceId = referenceId;
    this.errors = Collections.emptyList();
  }

  /**
   * Constructs a response for an unsuccessful payment.
   *
   * @param referenceId passed to {@link Payment#referenceId(String)}
   * @param errors list of error codes
   */
  public Response(String referenceId, List<String> errors) {
    this(null, referenceId, errors);
  }

  /**
   * Returns a payment ID that was generated by Square or null if the payment was unsuccessful.
   */
  public String paymentId() {
    return paymentId;
  }

  /**
   * Returns the ID that was passed to {@link Payment#referenceId(String)} or null if no ID
   * was provided.
   */
  public String referenceId() {
    return referenceId;
  }

  /**
   * Returns a list of error codes or an empty list if no errors occurred. Errors can occur if the
   * application ID or recipient's account ID are invalid.
   */
  public List<String> errors() {
    // Note: This API should catch all other errors before requesting the payment.
    return errors;
  }

  /**
   * Converts this response to an intent that can be passed to
   * {@link android.app.Activity#setResult(int, android.content.Intent)}.
   */
  public Intent toIntent() {
    Intent intent = new Intent();
    intent.putExtra(PAYMENT_ID, paymentId);
    intent.putExtra(REFERENCE_ID, referenceId);
    intent.putExtra(ERRORS, errors.toArray(new String[errors.size()]));
    return intent;
  }

  /**
   * Converts this response to a url to open in the browser, based on a given callback url provided
   * by a web client. Returns null if the base url is null.
   */
  public String toCallbackUrl(String callbackUrl, boolean canceled) {
    if (callbackUrl == null) return null;

    StringBuilder rtn = new StringBuilder(callbackUrl);

    boolean hasErrors = !errors.isEmpty();
    String status = canceled ? STATUS_CANCELLED : hasErrors ? STATUS_ERROR : STATUS_SUCCESSFUL;
    boolean hasParams = callbackUrl.indexOf('?') > -1;

    rtn.append(hasParams ? '&' : '?').append(PARAM_STATUS).append(status);

    if (referenceId() != null) rtn.append('&').append(PARAM_REFERENCE_ID).append(referenceId());

    if (!canceled) {
      if (hasErrors) {
        rtn.append('&').append(PARAM_ERRORS).append(errorsAsString(errors()));
      } else {
        rtn.append('&').append(PARAM_PAYMENT_ID).append(paymentId());
      }
    }

    return rtn.toString();
  }

  private static String errorsAsString(List<String> errors) {
    StringBuilder rtn = new StringBuilder();
    for (String e : errors) {
      if (rtn.length() > 0) {
        rtn.append(", ");
      }
      rtn.append(e);
    }
    return rtn.toString();
  }

  /**
   * Takes the intent that was passed to
   * {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)} and converts
   * it to a Response.
   *
   * @throws NullPointerException if data is null
   */
  public static Response from(Intent data) {
    if (data == null) throw new NullPointerException("data");
    String paymentId = data.getStringExtra(PAYMENT_ID);
    String referenceId = data.getStringExtra(REFERENCE_ID);
    String[] errors = data.getStringArrayExtra(ERRORS);
    return new Response(paymentId, referenceId, errors == null ? null : Arrays.asList(errors));
  }
}
